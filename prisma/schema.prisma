// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum language {
    EN
    RU
}

model Category {
    id            Int                   @id @default(autoincrement())
    slug          String                @unique
    image         String?
    parentId      Int?
    parent        Category?             @relation("parentSubCategories", fields: [parentId], references: [id])
    subCategories Category[]            @relation("parentSubCategories")
    products      Product[]
    properties    Property[]
    locale        CategoryTranslation[]
}

model CategoryTranslation {
    lang       language
    title      String
    Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId Int

    @@unique([categoryId, lang])
}

model Product {
    id         Int                  @id @default(autoincrement())
    price      Int
    image      String[]
    categoryId Int
    category   Category             @relation(fields: [categoryId], references: [id], onDelete: Restrict)
    FieldValue FieldValue[]
    locale     ProductTranslation[]
}

model ProductTranslation {
    lang        language
    name        String
    description String
    Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   Int

    @@unique([productId, lang])
}

model Property {
    id         Int           @id @default(autoincrement())
    field      Field[]
    titleId    Int
    title      PropertyTitle @relation(fields: [titleId], references: [id])
    category   Category?     @relation(fields: [categoryId], references: [id])
    categoryId Int?
}

model PropertyTitle {
    id       Int                        @id @default(autoincrement())
    property Property[]
    locale   PropertyTitleTranslation[]
}

model PropertyTitleTranslation {
    lang            language
    title           String
    PropertyTitle   PropertyTitle @relation(fields: [propertyTitleId], references: [id], onDelete: Cascade)
    propertyTitleId Int

    @@unique([propertyTitleId, lang])
}

model Field {
    id         Int          @id @default(autoincrement())
    aboutId    Int
    about      FieldAbout   @relation(fields: [aboutId], references: [id])
    propertyId Int
    property   Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    FieldValue FieldValue[]
}

model FieldAbout {
    id     Int                     @id @default(autoincrement())
    locale FieldAboutTranslation[]

    slug          String  @unique
    PropertyField Field[]
}

model FieldAboutTranslation {
    lang        language
    title       String
    description String

    FieldAbout   FieldAbout @relation(fields: [fieldAboutId], references: [id], onDelete: Cascade)
    fieldAboutId Int

    @@unique([fieldAboutId, lang])
}

model FieldValue {
    id      Int       @id @default(autoincrement())
    value   String
    Product Product[]
    fieldId Int
    field   Field     @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

//User  

enum Role {
    ADMIN
    USER
}

model User {
    id            Int       @id @default(autoincrement())
    email         String    @unique
    password      String?
    name          String?
    phone         String?
    address       String?
    image         String?
    emailVerified DateTime? @map("email_verified")
    role          Role      @default(USER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    Account       Account[]
    Session       Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String @id @default(cuid())
    sessionToken String @unique
    userId       Int

    expires DateTime
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
